<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Tic Tac Toe</title>
  <style>
    :root {
      --accent: #43e97b;
      --accent-2: #38f9d7;
      --text-light: #f9f9f9;
    }

    body {
      margin: 0;
      padding: 0;
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      background: linear-gradient(135deg, orange, deeppink, crimson);
      color: var(--text-light);
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      height: 100vh;
      overflow: hidden;
      position: relative;
    }

    .background-icon {
      position: absolute;
      font-size: 300px;
      color: rgba(255, 255, 255, 0.05);
      font-weight: bold;
      z-index: 0;
      transform: rotateX(25deg) rotateY(20deg) scale(1.2);
      user-select: none;
      pointer-events: none;
    }
    .background-x { top: 10%; left: 15%; }
    .background-o { bottom: 10%; right: 15%; }

    .container {
      background-color: rgba(0, 0, 0, 0.8);
      padding: 30px;
      border-radius: 20px;
      box-shadow: 10px 10px 30px rgba(0, 0, 0, 0.5);
      z-index: 1;
    }

    h2, p {
      text-align: center;
      text-shadow: 0 0 10px rgba(255, 255, 255, 0.3);
    }

    input {
      width: 100%;
      padding: 12px;
      margin-bottom: 10px;
      border: none;
      border-radius: 10px;
      background-color: #2c2c3e;
      color: var(--text-light);
    }

    .board {
      display: grid;
      grid-template-columns: repeat(3, 80px);
      grid-gap: 10px;
      justify-content: center;
      margin-top: 20px;
    }

    .cell {
      width: 80px;
      height: 80px;
      font-size: 36px;
      display: flex;
      align-items: center;
      justify-content: center;
      background: #222;
      color: #fff;
      border-radius: 12px;
      cursor: pointer;
    }
    .cell:hover:not(:empty) {
      cursor: not-allowed;
    }

    .button {
      margin-top: 20px;
      padding: 10px 20px;
      background: linear-gradient(to right, var(--accent), var(--accent-2));
      color: #fff;
      border: none;
      border-radius: 12px;
      font-size: 16px;
      cursor: pointer;
    }

    .scoreboard {
      margin-top: 15px;
      background: #2c2c3e;
      padding: 10px;
      border-radius: 12px;
    }

    .scoreboard p {
      margin: 5px;
      font-size: 16px;
    }
  </style>
</head>
<body>
  <div class="background-icon background-x">X</div>
  <div class="background-icon background-o">O</div>

  <div class="container">
    <h2>Tic Tac Toe</h2>
    <div id="playerForm">
      <input type="text" id="playerX" placeholder="Player 1 (X)">
      <input type="text" id="playerO" placeholder="Player 2 (O)">
      <button class="button" onclick="startGame()">Start Game</button>
    </div>

    <div id="gameUI" style="display:none;">
      <p id="status"></p>
      <div class="board" id="board"></div>
      <button class="button" onclick="resetGame()">Reset Game</button>
      <div class="scoreboard">
        <p id="scoreX">Player X: 0</p>
        <p id="scoreO">Player O: 0</p>
      </div>
    </div>
  </div>

  <script>
    let board = ["", "", "", "", "", "", "", "", ""];
    let currentPlayer = "X";
    let playerNames = { X: "Player X", O: "Player O" };
    let scores = { X: 0, O: 0 };
    let gameOver = false;
    let cells = [];

    async function startGame() {
      const xName = document.getElementById("playerX").value || "Player X";
      const oName = document.getElementById("playerO").value || "Player O";
      const response = await fetch('/set_players', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ playerX: xName, playerO: oName })
      });
      const data = await response.json();
      if (data.success) {
        updateGameState(data);
        document.getElementById("playerForm").style.display = "none";
        document.getElementById("gameUI").style.display = "block";
        if (cells.length === 0) createBoard();
      }
    }

    function createBoard() {
      const boardEl = document.getElementById("board");
      boardEl.innerHTML = "";
      cells = [];
      for (let i = 0; i < 9; i++) {
        const cell = document.createElement("div");
        cell.className = "cell";
        cell.addEventListener("click", () => makeMove(i));
        boardEl.appendChild(cell);
        cells[i] = cell;
      }
      updateBoard();
    }

    function updateBoard() {
      cells.forEach((cell, i) => {
        cell.textContent = board[i];
        cell.style.cursor = board[i] || gameOver ? "not-allowed" : "pointer";
      });
    }

    async function makeMove(index) {
        if (gameOver || board[index] !== "") return;
    
        const response = await fetch('/move', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ index })
        });
        const data = await response.json();
        if (data.success) {
        updateGameState(data);
        if (data.game_over) {
            alert(data.message);
            setTimeout(resetGame, 500);
        }
        } else {
        alert(data.message);
        }
    }

    async function resetGame() {
      const response = await fetch('/reset', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' }
      });
      const data = await response.json();
      if (data.success) {
        updateGameState(data);
      }
    }

    function updateGameState(data) {
      board = data.board;
      currentPlayer = data.current_player;
      gameOver = data.game_over;
      playerNames = data.players;
      scores = data.wins;
      updateBoard();
      updateStatus();
      updateScores();
    }

    function updateStatus() {
      document.getElementById("status").textContent = gameOver
        ? "Game Over - Click Reset to Play Again"
        : `${playerNames[currentPlayer]}'s Turn (${currentPlayer})`;
    }

    function updateScores() {
      document.getElementById("scoreX").textContent = `${playerNames.X} (X): ${scores.X}`;
      document.getElementById("scoreO").textContent = `${playerNames.O} (O): ${scores.O}`;
    }

    // Initialize on load
    document.addEventListener("DOMContentLoaded", async () => {
      const response = await fetch('/init');
      const data = await response.json();
      if (data.success) {
        updateGameState(data);
      }
    });
  </script>
</body>
</html>